/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.google.gson.Gson
import com.google.gson.JsonElement
import com.google.gson.TypeAdapter
import com.google.gson.TypeAdapterFactory
import com.google.gson.reflect.TypeToken
import com.google.gson.stream.JsonReader
import com.google.gson.stream.JsonWriter
import com.google.gson.annotations.JsonAdapter
import com.google.gson.annotations.SerializedName
import java.io.IOException


/**
 * A User who is purchasing from the pet store
 *
 * @param id 
 * @param username 
 * @param firstName 
 * @param lastName 
 * @param email 
 * @param password 
 * @param phone 
 * @param userStatus User Status
 */


data class ApiUser (

    @SerializedName("id")
    val id: kotlin.Long? = null,

    @SerializedName("username")
    val username: kotlin.String? = null,

    @SerializedName("firstName")
    val firstName: kotlin.String? = null,

    @SerializedName("lastName")
    val lastName: kotlin.String? = null,

    @SerializedName("email")
    val email: kotlin.String? = null,

    @SerializedName("password")
    val password: kotlin.String? = null,

    @SerializedName("phone")
    val phone: kotlin.String? = null,

    /* User Status */
    @SerializedName("userStatus")
    val userStatus: kotlin.Int? = null

) {

    companion object {
        var openapiFields: HashSet<String>? = null
        var openapiRequiredFields: HashSet<String>? = null
      
        init {
            // a set of all properties/fields (JSON key names)
            openapiFields = HashSet()
            openapiFields!!.add("id")
            openapiFields!!.add("username")
            openapiFields!!.add("firstName")
            openapiFields!!.add("lastName")
            openapiFields!!.add("email")
            openapiFields!!.add("password")
            openapiFields!!.add("phone")
            openapiFields!!.add("userStatus")
      
            // a set of required properties/fields (JSON key names)
            openapiRequiredFields = HashSet()
        }
      
       /**
        * Validates the JSON Element and throws an exception if issues found
        *
        * @param jsonElement JSON Element
        * @throws IOException if the JSON Element is invalid with respect to ApiUser
        */
        @Throws(IOException::class)
        fun validateJsonElement(jsonElement: JsonElement?) {
            if (jsonElement == null) {
              require(openapiRequiredFields!!.isEmpty()) { // has required fields but JSON element is null
                String.format("The required field(s) %s in ApiUser is not found in the empty JSON string", ApiUser.openapiRequiredFields.toString())
              }
            }
      
            val entries = jsonElement!!.getAsJsonObject().entrySet()
            // check to see if the JSON string contains additional fields
            for ((key) in entries) {
              require(openapiFields!!.contains(key)) {
                String.format("The field `%s` in the JSON string is not defined in the `ApiUser` properties. JSON: %s", key, jsonElement.toString())
              }
            }
            val jsonObj = jsonElement.getAsJsonObject()
            if (jsonObj["username"] != null && !jsonObj["username"].isJsonNull) {
              require(jsonObj.get("username").isJsonPrimitive()) {
                String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj["username"].toString())
              }
            }
            if (jsonObj["firstName"] != null && !jsonObj["firstName"].isJsonNull) {
              require(jsonObj.get("firstName").isJsonPrimitive()) {
                String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj["firstName"].toString())
              }
            }
            if (jsonObj["lastName"] != null && !jsonObj["lastName"].isJsonNull) {
              require(jsonObj.get("lastName").isJsonPrimitive()) {
                String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj["lastName"].toString())
              }
            }
            if (jsonObj["email"] != null && !jsonObj["email"].isJsonNull) {
              require(jsonObj.get("email").isJsonPrimitive()) {
                String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj["email"].toString())
              }
            }
            if (jsonObj["password"] != null && !jsonObj["password"].isJsonNull) {
              require(jsonObj.get("password").isJsonPrimitive()) {
                String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj["password"].toString())
              }
            }
            if (jsonObj["phone"] != null && !jsonObj["phone"].isJsonNull) {
              require(jsonObj.get("phone").isJsonPrimitive()) {
                String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj["phone"].toString())
              }
            }
        }
    }

}

